Test HumanPlayer and AI player methods
=============================
/*
 * 	HumanPlayer player1;
	HumanPlayer player2;
	Judger<HumanPlayer, HumanPlayer> j(player1, player2);
	int winner = j.play(true, all_states);
	std::cout << "The winner is" << winner << std::endl;
	Player player(0.1 ,0.1, all_states);
	State state;
	State state2;
	state2.data = {{1, -1, -1},
					{1, 1, 0},
					{0,0, -1}};

	state2.winner = 0;
	state2.end = 0;
	State state3;
	state3.data = {{1, 1, 1},
					{-1, -1, 0},
					{0,0,0}};
	state3.winner = 1;
	state3.end = 1;
	player.states.push_back(state);
	player.greedy.push_back(true);
	player.states.push_back(state2);
	player.greedy.push_back(true);
	player.states.push_back(state3);
	player.greedy.push_back(true);
	std::cout << (player.states)[0] << std::endl;
	std::cout << (player.greedy)[0] << std::endl;
	player.setSymbol(1);
	player.updateEstimates();
	player.act();
	player.save_policy();
	player.load_policy();
	player.reset();
	std::cout << "---------------------------" << std::endl;
	std::cout << (player.states)[0] << std::endl;
	std::cout << (player.greedy)[0] << std::endl;
 *
 */
 
 Validation printing
 ==========================================================
 /*
	/*std::cout << "Before shuffle................" << std::endl;
	for(std::vector<std::pair<double, std::pair<int, int>>>::iterator it=values.begin(); it!=values.end(); it++){
		std::cout << "Estimated: " << std::get<0>(*it) << " row: " << std::get<0>(std::get<1>(*it)) << " column: " << std::get<1>(std::get<1>(*it));
		std::cout << std::endl;
	}
	std::cout << "After shuffle................" << std::endl;
	for(std::vector<std::pair<double, std::pair<int, int>>>::iterator it=values.begin(); it!=values.end(); it++){
		std::cout << "Estimated: " << std::get<0>(*it) << " row: " << std::get<0>(std::get<1>(*it)) << " column: " << std::get<1>(std::get<1>(*it));
		std::cout << std::endl;
	}

	std::cout << "After sort................" << std::endl;
	for(std::vector<std::pair<double, std::pair<int, int>>>::iterator it=values.begin(); it!=values.end(); it++){
		std::cout << "Estimated: " << std::get<0>(*it) << " row: " << std::get<0>(std::get<1>(*it)) << " column: " << std::get<1>(std::get<1>(*it));
		std::cout << std::endl;
	}

	std::cout << "After reverse................" << std::endl;
	for(std::vector<std::pair<double, std::pair<int, int>>>::iterator it=values.begin(); it!=values.end(); it++){
		std::cout << "Estimated: " << std::get<0>(*it) << " row: " << std::get<0>(std::get<1>(*it)) << " column: " << std::get<1>(std::get<1>(*it));
		std::cout << std::endl;
	}


 */
 
 